**************** HOW TO IMPLEMENT ATOMICITY AND DURABILITY IN TRANSACTION ******************

Recovery Mechanism Component of DBMS supports atomicity and durability.

1) - SHADOW-COPY SCHEME -->>

        Based on making copies of DB.
        Assumption only one transaction (T) is Active at a time.
        A pointer called db-pointer is maintained on the disk; which at any instant points to cuurent copy of DB.
        T -> wants to Modify data in DB, first create a complete copy of DB.
        All further updates are done on new DB copy leaving the original copy untouched.
        If at any point the T has to be aborted the system deletes the new copy. And the old copy is not affected.
        IF T success, it is committed as,
                    (i) - OS makes sure all the pages of the new copy of the DB written on the disk.
                    (ii) - DB system updates the db-pointer to point to the new copy of the DB.
                    (iii) - New copy is now the current copy of DB.
                    (iv) - The old copy is deleted
                    (v) - The T is said to have been COMMITTED at the point where the updated db-pointer is written to disk.
        Atomicity:
                (a) - if T fails at any time before db-pointer is updated, the old content of DB aren't affected.
                (b) - T abort can be done by just deleting the new copy of DB.
                (c) - Hence, either all updates are reflected or none.
        Durability:
                (a) - Suppose,system fails are any time before the updated db-pointer is written to disk.
                (b) - When the system restarts, it will read db-pointer & will thus, see the original content of DB and 
                      none of the effects of T will be visible.    
                (c) - T is assumed to be successful only when db-pointer is updated.
                (d) - If system fails after db-pointer has been updated. Before that all the pages of the new copy were 
                      wriiten to the disk. Hence, when system restarts it will read new DB copy.

        The implementation is dependent on write to the db-pointer being atmoic. Luckily, disk system provide atomic 
        updates to entire block or at least a disk sector. So, we make sure db-pointer lies entirely in a single sector.
        By storing db-pointer at the beginning of a block.

        Inefficient, as entire DB is copied for every transaction.        

2) - LOG BASE RECOVERY METHODS -->>

        The log is a sequence of records. Log of each transaction is maintained in some stable storage so that if any 
        failure occurs, then it can be recovered from there.
        If any operation is performed on the database, then it will be recorded in the log.
        But the process of storing the logs should be done before the actual transaction is applied in the database.
        
        DEFERRED DB MODIFICATIONS:
                (i) - Ensuring atomicity by recording all the DB modifications in the log but deferring the execution
                      of all the write operatios until the final action of the T has been executed.
                (ii) - Log information is used to execute deferred writes when T is completed.
                (iii) - If system crashed before the T completes, or if T is aborted, the information in the logs are ignored.
                (iv) - If T completes, the records associated to it in the log file are used in executing the deferred writes.
                (v) - If failure accur while this updating is taking place, we preform redo.
        IMMEDIATE DB MODIFICATIONS:
                (i) - DB modifications to be output to the DB while the T is still in active state.
                (ii) - Log information is used to execute deferred writes when T is completed.
                (iii) - In the event of CRASH or T failure, system uses old value field of the log records to restore modified values.
                (iv) - Update takes place only after log records in a stable storage.
                (v) - Failure Handling:
                        (a) - System failure before T completes, or if T aborted, then old value field is used to undo the T.
                        (b) - If T completes and system crashes, then new value filed is used to redo T having commit logs in the logs.
                        