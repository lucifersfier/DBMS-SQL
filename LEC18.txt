*********************************       SQL     *********************************
1) - Difference between SQL and MySQL -->>

                SQL                      |                  MYSQL
    (a) - Query Language.                |   (a) - MYSQL itself a RDBMS.
    (b) - way to access data.            |   (b) - CRUD done on it using SQL

2) - RDBMS is a software that enables us to implement designed relational model.
     Example: MySQL, MS SQL, Oracle, IBM etc.
     Table/Relation is the simplest form of data storage object in R-DB.
     MySQL is open source RDBMS , and it uses SQL for all CRUD operations.

3) - MySQL used client-server model, where client is CLI or frontend that used services provided by MySQL server.

4) - IN SQL data types --->>>

     size -->> TINY < SMALL < MEDIUM < INT < BIGINT

5) - We can use SIGNED AND UNSIGNED which means 
     TINYINT -->> (-128 TO 127) but if we changed it to Unsigned
     UNSIGNED TINYINT -->> (0 TO 255)

6) - SYNTAX ---->>>>

                    CREATE TABLE table_name(
                    col1 INT,
                    COL2 INT UNSIGNED    
                    );

7) - Types of Command in SQL -->>

     (i) - Data Definition Language -->> 

            (a) - CREATE 
            (b) - ALTER TABLE
            (c) - DROP
            (d) - TRUNCATE
            (e) - RENAME

     (ii) - DRL/DQL (Data Retrieval Language/ Data Query Language) -->>

            (a) - SELECT

     (iii) - Data Manipulation Language -->>

            (a) - INSERT
            (b) - UPDATE
            (c) - DELETE

     (iv) - Data Control Language -->>

            (a) - GRANT
            (b) - REVOKE

     (V) - Transaction Control Language -->>

            (a) - START TRANSACTION
            (b) - COMMIT
            (c) - ROLLBACK
            (d) - SAVEPOINT

8) - MANAGING DATABASE(DDL)

     (i) - Creation of DB ->

        (a) - CREATE DATABASE IF  NOT EXISTS db-name;
        (b) - USE db-name; // need to execute to choose on which DB CREATE TABLE etc commands will be executed.
              // make switching between DBs possible.
        (c) - DROP DATABASE IF EXISTS db-name; // dropping database.
        (d) - SHOW DATABASES; //list of all DBs in the server.
        (e) - SHOW TABLES; // list of all tables in the selected database.
     
     (ii) - Creating a ORG Database -->>

              CREATE DATABASE ORG;
              SHOW DATABASES;
              USE ORG;

              CREATE TABLE WORKER(
                     WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
                     FIRST_NAME VARCHAR(255),
                     LAST_NAME VARCHAR(255),
                     SALARY INT(15),
                     JOINING_DATE DATETIME,
                     DEPARTMENT VARCHAR(255)
              );

              INSERT INTO WORKER(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
              (001, 'NITTYANSH', 'SRIVASTAVA', '100000', '14-02-23 09.00.00', 'HR'),
              (002, 'SHIVANSH', 'SRIVASTAVA', '200000', '15-03-23 10.00.00', 'SALES'),
              (003, 'JAHNAVI', 'SRIVASTAVA', '300000', '16-12-23 11.00.00', 'IT'),
              (004, 'AMAN', 'SAXENA', '500000', '18-11-23 12.00.00', 'HR');


              SELECT *FROM WORKER;


              CREATE TABLE BONUS(
	              WORKER_REF_ID INT,
	              BONUS_AMOUNT INT(10),
	              BONUS_DATE DATETIME,
	              FOREIGN KEY (WORKER_REF_ID)
		              REFERENCES WORKER(WORKER_ID)
		              ON DELETE CASCADE
              );     

              INSERT INTO BONUS
	              (WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
		              (001, 25000, '16-02-23'),
                            (002, 25600, '16-03-23'),
                            (003, 29000, '16-03-23'),
                            (004, 35000, '16-03-23');

              SELECT* from BONUS;

              CREATE TABLE TITLE(
	              WORKER_REF_ID INT,
                     WORKER_TITLE VARCHAR(255),
                     AFFECTED_FROM DATETIME,
                     FOREIGN KEY (WORKER_REF_ID)
              		REFERENCES WORKER(WORKER_ID)
                            ON DELETE CASCADE
              );

              INSERT INTO TITLE
	              (WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
		              (001, 'MANAGER', '2016-02-20 00:00:00'),
                            (002, 'EXECUTIVE', '2016-04-21 00:00:00'),
                            (003, 'EXECUTIVE', '2016-04-20 00:00:00'),
                            (004, 'MANAGER', '2016-05-20 00:00:00');

     (iii) - Data Retrieval Language -->>
        
        (a) - SYNTAX -->>
                            SELECT <set of column names> FROM <table_name>;

        (b) - Order of execution from RIGHT to LEFT.
        (c) - We can use SELECT keyword without using FROM clause using DUAL Tables.
              Dual tables are dummy tables created by MYSQL, help users to do certain obvious actions without referring to user defined tables.
              Example -> SELECT 55+11;
                         SELECT now();
                         SELECT ucase(); etc.
        
        (d) - WHERE -->>

              (i) - Reduce rows based on given conditions.
              (ii) - Example - SELECT *FROM customer WHERE age>18;
                               SELECT *FROM worker WHERE DEPARTMENT='HR';
       
        (e) - BETWEEN -->>

              (i) -  SELECT *FROM customer WHERE age between 0 AND 100;
              (ii) - SELECT *FROM WORKER WHERE SALARY between 100000 and 400000;

        (f) - IN -->>

              (i) - Reduce OR conditions 
              (ii) - Example - SELECT *FROM officers WHERE officer_name IN ('Lakshay','Maharana Pratap','Deepika');

        (g) - AND/OR/NOT -->>

              (i) - AND : WHERE cond1 AND cond2
              (ii) - OR : WHERE cond1 OR cond2
              (iii) - NOT : WHERE col_name NOT IN (1,2,3,4);

        (h) - IS NULL -->>

              (i) - EXAMPLE - SELECT *FROM customer WHERE prime_status is NULL;

        (i) - PATTERN SEARCHING/WILDCARD('%','_') -->>

              (i) - '%' any number of character from 0 to n. Similar to '*' asterisk in regex.
              (ii) - '_' only one character.
              (iii) - SELECT *FROM customer WHERE name LIKE '%p_';
        
        (j) - ORDER BY -->>
        
              (i) - Sorting the data retrieved using WHERE clause.
              (ii) - ORDER BY <column-name> DESC;
              (iii) - DESC = Descending and ASC = Ascending 
              (iv) - e.g., SELECT *FROM customer ORDER BY name DESC;

        (k) - GROUP BY -->>

              (i) - Group by clause is used to collect data from multiple records and group the result by one or more column. Ot is generally
                    used in a SELECT statement.
              (ii) - Groups into category based on column given.
              (iii) - SELECT c1,c2,c3 FROM sample_table WHERE conf GROUP BY c1,c2,c3.
              (iv) - All the column names mentioned after SELECT statement shall be repeated in GROUP BY, in order to successfully execute the query.
              (v) - used with aggregation functions to perform various actions.
              
                  (a) - COUNT()
                  (b) - SUM()
                  (c) - AUG()
                  (d) -  MIN()
                  (e) - MAX()
        
        (l) - DISTINCT -->>

              (i) - Find distinct values in the table.
              (ii) - SELECT DISTINCT (col_name) FROM table_name;
              (iii) - GROUP BY can also be used for the same.
                      (a) - "Select col_name from table GROUP BY col_name;" same output as above DISTINCT query.
                      (b) - SQL is smart enough to realise that if you are using GROUP BY and not using any aggregation function, then you 
                            mean "DISTINCT".
        
        (m) - GROUP BY HAVING -->>

              (i) - out of the categories made by GROUP BY, we would like to know only particular thing(cond).
              (ii) - Similar to WHERE.
              (iii) - Select COUNT (cust_id),country from customer GROUP BY country HAVING COUNT(cust_id)>50;
              (iv) - WHERE VS HAVING

                        (a) - Both have same function of filtering the row base on certain conditions.
                        (b) - WHERE clause is used to filter the rows from the table based on specified conditions.
                        (c) - HAVING clause is used to filter the rows from the groups based on the specified conditions.
                        (d) - HAVING is used after GROUP BY while WHERE is used before GROUP BY clause.
                        (e) -If you are using HAVING, GROUP BY is necessary.
                        (f) - WHERE can be used with SELECT, UPDATE & DELETE keywords while GROUP BY used with SELECT.

      (iv) - CONSTRAINTS (DDL) -->>

               (i) - Primary Key -> PK is not null, unique and only one per table.
               (ii) - Foreign Key ->
                                    (a) - FK refers to PK of other table.
                                    (b) - Each relation can having any number of FK.
                                    (c) - CREATE TABLE ORDER(
                                          id INT PRIMARY KEY,
                                          delivery_date DATE,
                                          order_placed_date DATE,
                                          cust_id INT,
                                          FORIEGN KEY (cust_id) REFERENCES customer(id)
                                          );
            




       


