*************************   PRACTICE SQL QUERIES *************************

-- Q1 - Write an SQL query to fetch "FIRST_NAME" from worker table using the alias name as <WORKER_NAME>.

SELECT first_name AS WORKER_NAME FROM worker;

-- Q2 - write an SQL query to fetch 'FIRST_NAME' from worker table in upper case.

SELECT upper(first_name) FROM worker;

-- Q3 - write an SQL query to fetch unique values of DEPARTMENT from worker table.

SELECT DISTINCT department FROM worker;
-- USING GROUP BY 
SELECT department FROM worker GROUP BY department;

-- Q4 - Write an SQL query to print first three characters of first_name from worker table.

SELECT substring(first_name,1,3) FROM worker;

-- Q5 - Write an SQL query to find the postion of the alphabet ('b') in the first name column 'Amitabh' from worker table.

select position('Y' IN 'NITTYANSH') from worker where first_name = 'NITTYANSH'; 

-- Q6 - write an SQL query to print the first_name from worker table after removing white spaces from the right side.

SELECT RTRIM(first_name) FROM worker;

-- Q7 - write an SQL query to print the first_name from worker table after removing white spaces from the left side.

SELECT LTRIM(first_name) FROM worker;

-- Q8 - Write an SQL query that fetches the unique values of DEPARTMENT from worker table and prints its  length.

SELECT DISTINCT department, LENGTH(department) FROM worker;

-- Q9 - Write an SQL query to print the first_name from worker table after replacing 'a' with 'A'.

SELECT REPLACE(first_name,'a','A') FROM worker; 

-- Q10 - Write an SQL query to print the first_name and last_name from worker table into a single column COMPLETE_NAME.

SELECT CONCAT(first_name,' ', last_name) AS COMPLETE_NAME from worker;

-- Q11 - write an SQL query to print all worker details from the worker table order by first_name ASCENDING.

SELECT *from worker ORDER BY first_name;

-- Q12 - write an SQL query to print all worker details from the worker table order by first_name ASCENDING and department descending.

SELECT *FROM worker ORDER BY first_name ASC, department DESC;

-- Q13 - write an SQL query to print details for workers with the first name as "Vipul" and "Satish" from worker table.

SELECT *FROM worker WHERE first_name IN ('Nittyansh','Shivansh');

-- Q14 - write an SQL query to print details for workers excluding with the first name as "Vipul" and "Satish" from worker table.

SELECT *FROM worker WHERE first_name NOT IN ('Nittyansh','Shivansh');

-- Q15 - Write an SQL query to print details of workers with department name as 'Sales'.

SELECT *FROM worker WHERE department = 'Sales';
SELECT *FROM worker WHERE department LIKE 'Sales%';

-- Q16 - write an SQL query to print details of workers whose first_name contains 'a'.

SELECT *FROM worker WHERE first_name LIKE '%a%';

-- Q17 - write an SQL query to print details of workers whose first_name ends with 'a'.

SELECT *FROM worker WHERE first_name LIKE '%a';

-- Q18 - Write an SQL query to print details of workers whose first_name ends with 'h' and contains six alphabets.

SELECT *FROM worker WHERE first_name LIKE '________h';

-- Q19 - Write an SQL query to print the names of the workers whose salary lies between 10000 to 500000.

SELECT first_name, last_name FROM worker Where Salary >= 200000 and Salary <= 5000000;

-- Q20 - Write a SQL query to print details of the workers who have joined in Feb 23.

Select *FROM worker WHERE YEAR(joining_date) = 2023 AND MONTH(joining_date) = 02;

-- Q21 - Write a SQL query to fetch the count of employees working in the department 'Admin'.

SELECT count(department) FROM worker WHERE department = 'HR';

-- Q22 - Write an SQL query to fetch worker full names with salaries>=300000 and <=1000000.

SELECT concat(first_name,' ',last_name)  AS full_name FROM worker WHERE salary between 300000 and 1000000;

-- Q23 - Write an SQL query to fetch the no. of workers for each department in the descending order.

SELECT department,COUNT(worker_id) FROM worker GROUP BY department order by COUNT(worker_id) DESC;

-- Q24 - Write an SQL query to print the details of the workers who are also managers.

SELECT *FROM worker as w
INNER JOIN TITLE as t
ON w.worker_id = t.worker_ref_id
WHERE worker_title = 'Manager';

-- Q25 - Write an SQL query to fetch number (more than 1) of different titles in the ORG.


SELECT worker_title, count(*) FROM title GROUP BY worker_title HAVING count(*)>1;

-- Q26 - Write an SQL query to show only ODD rows from the table.

SELECT *FROM worker WHERE MOD (worker_id,2) != 0;

-- Q26 - Write an SQL query to show only EVEN rows from the table.

SELECT *FROM worker WHERE MOD (worker_id,2) = 0;

-- Q27 - Write a SQL query to clone a new table from another table.

CREATE TABLE worker_clone LIKE worker;
INSERT INTO worker_clone SELECT *FROM worker; -- For also cloning the data of worker in worker_clone

-- Q28 - Write an SQL query to fetch intersecting records of two tables.

SELECT worker.* FROM worker INNER JOIN worker_clone using(worker_id);

-- Q29 - Write an SQL query to show records from one table that another table doesn't have.

SELECT worker.* FROM worker LEFT JOIN worker_clone USING (worker_id) WHERE worker_clone.worker_id IS NULL;

-- Q30 - Write an SQL query to show the current date and time.

SELECT CURDATE();
SELECT NOW();

-- Q31 - Write an SQL query to show the top n (say 5) records of a table order by descending order.

SELECT *FROM worker ORDER BY salary DESC LIMIT 5;

-- Q32 - Write an SQL query to show the nth (say n =5) highest salary from a table.

SELECT *FROM worker ORDER BY salary DESC LIMIT 4,1;

-- Q33 - write an SQL query to determine the 5th highest salary without using LIMIT keyword.

SELECT first_name,salary FROM worker w1 WHERE 4 = (SELECT COUNT(DISTINCT (w2.salary)) FROM worker w2 WHERE w2.salary >= w1.salary);

-- Q34 - write an SQL query to fetch the list of employees with the same salary.

SELECT w1.* FROM worker w1, worker w2 WHERE w1.salary=w2.salary and w1.worker_id != w2.worker_id;

-- Q35 - write an SQL query to show the second highest salary from a table.

SELECT *FROM worker ORDER BY salary DESC LIMIT 1,1;
SELECT MAX(salary) FROM worker
WHERE salary NOT IN (SELECT MAX(salary) FROM worker);

-- Q36 - write an SQL query to show one row twice in results from a table.

SELECT *FROM worker 
UNION ALL
SELECT *FROM worker ORDER BY worker_id;

-- Q37 - write an SQL query to list worker_id who doesn't get bonus.

SELECT worker_id FROM worker WHERE worker_id NOT IN (SELECT worker_ref_id FROM bonus);

-- Q38 - write an SQL query to fetch the first 50% records from a table.

SELECT *FROM worker WHERE worker_id <= (SELECT COUNT(worker_id)/2 FROM worker);

-- Q39 - Write an SQL query to fetch the departments that have less than 4 people in it.

SELECT department, COUNT(department) as depCount FROM worker GROUP BY department having depCount < 2;

-- Q40 - write an SQL query to show all departments along with the number of people in there.

SELECT DISTINCT department, COUNT(department) AS depCount FROM worker GROUP BY department;